//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RowaWcf.Tests.ServiceWithCallbacksNetTcp {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/RowaWcf.Tests.TestServices")]
    [System.SerializableAttribute()]
    public partial class ArgumentFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArgumentNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArgumentName {
            get {
                return this.ArgumentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArgumentNameField, value) != true)) {
                    this.ArgumentNameField = value;
                    this.RaisePropertyChanged("ArgumentName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceWithCallbacksNetTcp.ITestServiceWithCallbacks", CallbackContract=typeof(RowaWcf.Tests.ServiceWithCallbacksNetTcp.ITestServiceWithCallbacksCallback))]
    public interface ITestServiceWithCallbacks {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCallbackService/SubscribeForCallbacks", ReplyAction="http://tempuri.org/IClientCallbackService/SubscribeForCallbacksResponse")]
        void SubscribeForCallbacks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCallbackService/SubscribeForCallbacks", ReplyAction="http://tempuri.org/IClientCallbackService/SubscribeForCallbacksResponse")]
        System.Threading.Tasks.Task SubscribeForCallbacksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCallbackService/UnsubscribeForCallbacks", ReplyAction="http://tempuri.org/IClientCallbackService/UnsubscribeForCallbacksResponse")]
        void UnsubscribeForCallbacks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientCallbackService/UnsubscribeForCallbacks", ReplyAction="http://tempuri.org/IClientCallbackService/UnsubscribeForCallbacksResponse")]
        System.Threading.Tasks.Task UnsubscribeForCallbacksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceWithCallbacks/DoAction", ReplyAction="http://tempuri.org/ITestServiceWithCallbacks/DoActionResponse")]
        void DoAction();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceWithCallbacks/DoAction", ReplyAction="http://tempuri.org/ITestServiceWithCallbacks/DoActionResponse")]
        System.Threading.Tasks.Task DoActionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceWithCallbacks/DoActionWithParam", ReplyAction="http://tempuri.org/ITestServiceWithCallbacks/DoActionWithParamResponse")]
        void DoActionWithParam(int param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceWithCallbacks/DoActionWithParam", ReplyAction="http://tempuri.org/ITestServiceWithCallbacks/DoActionWithParamResponse")]
        System.Threading.Tasks.Task DoActionWithParamAsync(int param);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceWithCallbacks/GetMyEndpoint", ReplyAction="http://tempuri.org/ITestServiceWithCallbacks/GetMyEndpointResponse")]
        string GetMyEndpoint();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceWithCallbacks/GetMyEndpoint", ReplyAction="http://tempuri.org/ITestServiceWithCallbacks/GetMyEndpointResponse")]
        System.Threading.Tasks.Task<string> GetMyEndpointAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceWithCallbacksCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITestServiceWithCallbacks/TestCallback")]
        void TestCallback();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestServiceWithCallbacks/TestCallbackWithResult", ReplyAction="http://tempuri.org/ITestServiceWithCallbacks/TestCallbackWithResultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RowaWcf.Tests.ServiceWithCallbacksNetTcp.ArgumentFault), Action="http://tempuri.org/ITestServiceWithCallbacks/TestCallbackWithResultArgumentFaultF" +
            "ault", Name="ArgumentFault", Namespace="http://schemas.datacontract.org/2004/07/RowaWcf.Tests.TestServices")]
        int TestCallbackWithResult(int param);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceWithCallbacksChannel : RowaWcf.Tests.ServiceWithCallbacksNetTcp.ITestServiceWithCallbacks, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceWithCallbacksClient : System.ServiceModel.DuplexClientBase<RowaWcf.Tests.ServiceWithCallbacksNetTcp.ITestServiceWithCallbacks>, RowaWcf.Tests.ServiceWithCallbacksNetTcp.ITestServiceWithCallbacks {
        
        public TestServiceWithCallbacksClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TestServiceWithCallbacksClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TestServiceWithCallbacksClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceWithCallbacksClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceWithCallbacksClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeForCallbacks() {
            base.Channel.SubscribeForCallbacks();
        }
        
        public System.Threading.Tasks.Task SubscribeForCallbacksAsync() {
            return base.Channel.SubscribeForCallbacksAsync();
        }
        
        public void UnsubscribeForCallbacks() {
            base.Channel.UnsubscribeForCallbacks();
        }
        
        public System.Threading.Tasks.Task UnsubscribeForCallbacksAsync() {
            return base.Channel.UnsubscribeForCallbacksAsync();
        }
        
        public void DoAction() {
            base.Channel.DoAction();
        }
        
        public System.Threading.Tasks.Task DoActionAsync() {
            return base.Channel.DoActionAsync();
        }
        
        public void DoActionWithParam(int param) {
            base.Channel.DoActionWithParam(param);
        }
        
        public System.Threading.Tasks.Task DoActionWithParamAsync(int param) {
            return base.Channel.DoActionWithParamAsync(param);
        }
        
        public string GetMyEndpoint() {
            return base.Channel.GetMyEndpoint();
        }
        
        public System.Threading.Tasks.Task<string> GetMyEndpointAsync() {
            return base.Channel.GetMyEndpointAsync();
        }
    }
}
